#!/usr/bin/env python3
"""
GitHub-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∞–π–ª–∞–º–∏ ru.json, en.json, zh.json –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
"""

import json
import os

class GitHubTranslator:
    """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    
    def __init__(self):
        # –ü–æ–ª–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–µ–π—Å–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è GitHub)
        self.case_translations = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            "–ò–ò –≤ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏": {
                "en": "AI in Industry",
                "zh": "Â∑•‰∏ö‰∫∫Â∑•Êô∫ËÉΩ"
            },
            "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ B2B –∏ B2C": {
                "en": "Examples of artificial intelligence use in B2B and B2C",
                "zh": "‰∫∫Â∑•Êô∫ËÉΩÂú®B2BÂíåB2C‰∏≠ÁöÑÂ∫îÁî®Á§∫‰æã"
            },
            "–Ø–∑—ã–∫:": {
                "en": "Language:",
                "zh": "ËØ≠Ë®Ä:"
            },
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ, LLM) –≤ –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏, —Å–µ–ª—å—Å–∫–æ–º —Ö–æ–∑—è–π—Å—Ç–≤–µ, –ª–æ–≥–∏—Å—Ç–∏–∫–µ, –≥–æ—Ä–Ω–æ–¥–æ–±—ã–≤–∞—é—â–µ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏, –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, —Ç–µ–∫—Å—Ç–∏–ª–µ, –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏.": {
                "en": "Research of real examples of artificial intelligence application (machine learning, computer vision, LLM) in metallurgy, agriculture, logistics, mining, healthcare, textile, manufacturing, and machinery industries.",
                "zh": "Á†îÁ©∂‰∫∫Â∑•Êô∫ËÉΩÔºàÊú∫Âô®Â≠¶‰π†„ÄÅËÆ°ÁÆóÊú∫ËßÜËßâ„ÄÅLLMÔºâÂú®ÂÜ∂Èáë„ÄÅÂÜú‰∏ö„ÄÅÁâ©ÊµÅ„ÄÅÈááÁüø„ÄÅÂåªÁñó‰øùÂÅ•„ÄÅÁ∫∫Áªá„ÄÅÂà∂ÈÄ†‰∏öÂíåÊú∫Ê¢∞Âà∂ÈÄ†‰∏öÁöÑÂÆûÈôÖÂ∫îÁî®Á§∫‰æã„ÄÇ"
            },
            
            # –§–∏–ª—å—Ç—Ä—ã
            "–§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç—Ä–∞—Å–ª–∏:": {"en": "Filter by industry:", "zh": "ÊåâË°å‰∏öÁ≠õÈÄâ:"},
            "–í—Å–µ –æ—Ç—Ä–∞—Å–ª–∏": {"en": "All industries", "zh": "ÊâÄÊúâË°å‰∏ö"},
            "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è": {"en": "Metallurgy", "zh": "ÂÜ∂Èáë"},
            "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ": {"en": "Agriculture", "zh": "ÂÜú‰∏ö"},
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": {"en": "Logistics", "zh": "Áâ©ÊµÅ"},
            "–ì–æ—Ä–Ω–æ–¥–æ–±—ã–≤–∞—é—â–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å": {"en": "Mining", "zh": "ÈááÁüø‰∏ö"},
            "–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": {"en": "Healthcare", "zh": "ÂåªÁñó‰øùÂÅ•"},
            "–¢–µ–∫—Å—Ç–∏–ª—å": {"en": "Textile", "zh": "Á∫∫Áªá"},
            "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": {"en": "Manufacturing", "zh": "Âà∂ÈÄ†‰∏ö"},
            "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ": {"en": "Machinery", "zh": "Êú∫Ê¢∞Âà∂ÈÄ†"},
            
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ò–ò:": {"en": "Filter by AI type:", "zh": "ÊåâAIÁ±ªÂûãÁ≠õÈÄâ:"},
            "–í—Å–µ —Ç–∏–ø—ã": {"en": "All types", "zh": "ÊâÄÊúâÁ±ªÂûã"},
            "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ": {"en": "Machine Learning", "zh": "Êú∫Âô®Â≠¶‰π†"},
            "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ": {"en": "Computer Vision", "zh": "ËÆ°ÁÆóÊú∫ËßÜËßâ"},
            "–Ø–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏": {"en": "Language Models", "zh": "ËØ≠Ë®ÄÊ®°Âûã"},
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–µ–π—Å–æ–≤
            "–ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∞:": {"en": "Business task:", "zh": "‰∏öÂä°‰ªªÂä°:"},
            "–†–µ—à–µ–Ω–∏–µ:": {"en": "Solution:", "zh": "Ëß£ÂÜ≥ÊñπÊ°à:"},
            "–≠—Ñ—Ñ–µ–∫—Ç:": {"en": "Effect:", "zh": "ÊïàÊûú:"},
            
            # –ü–µ—Ä–µ–≤–æ–¥—ã –∫–µ–π—Å–æ–≤
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤ —Å—Ç–∞–ª–µ–ª–∏—Ç–µ–π–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –ö–∏—Ç–∞—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ò–ò": {
                "en": "Optimization of production processes and creation of China's first AI computing center in the steel industry",
                "zh": "‰ºòÂåñÁîü‰∫ßÊµÅÁ®ãÂπ∂ÂàõÂª∫‰∏≠ÂõΩÈí¢ÈìÅË°å‰∏öÈ¶ñ‰∏™‰∫∫Â∑•Êô∫ËÉΩËÆ°ÁÆó‰∏≠ÂøÉ"
            },
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ 5%": {
                "en": "Prediction accuracy increased by 5%",
                "zh": "È¢ÑÊµãÂáÜÁ°ÆÁéáÊèêÈ´ò5%"
            },
            "–°–Ω–∏–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–µ—Ä–±–∏—Ü–∏–¥–æ–≤ –Ω–∞ 60-70%": {
                "en": "Reduction of herbicide use by 60-70%",
                "zh": "Èô§ËçâÂâÇ‰ΩøÁî®ÈáèÂáèÂ∞ë60-70%"
            },
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –Ω–∞ 10-15%": {
                "en": "Yield increase by 10-15%",
                "zh": "‰∫ßÈáèÊèêÈ´ò10-15%"
            },
            "–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏": {
                "en": "Significant reduction in defective product levels",
                "zh": "ÊòæËëóÈôç‰ΩéÊ¨°ÂìÅÁéá"
            },
            "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –æ—à–∏–±–æ–∫": {
                "en": "Increased work accuracy and reduced risk of errors",
                "zh": "ÊèêÈ´òÂ∑•‰ΩúÂáÜÁ°ÆÊÄßÂπ∂Èôç‰ΩéÈîôËØØÈ£éÈô©"
            },
            "–°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ–≤ –¥–æ 30%": {
                "en": "Downtime reduction up to 30%",
                "zh": "ÂÅúÊú∫Êó∂Èó¥ÂáèÂ∞ëÈ´òËææ30%"
            },
            "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç–æ–µ –∑–µ–º–ª–µ–¥–µ–ª–∏–µ": {
                "en": "Environmentally friendly farming",
                "zh": "ÁéØ‰øùÂÜú‰∏ö"
            }
        }
    
    def translate_text(self, text: str, target_lang: str) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç"""
        if not text or not text.strip():
            return text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        if text in self.case_translations:
            return self.case_translations[text].get(target_lang, text)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—á–µ—Ç—á–∏–∫–∏
        import re
        counter_pattern = r'(\d+)\s*(–∫–µ–π—Å[–∞-—è]*)\s*–∏–∑\s*(\d+)\s*(–æ—Ç—Ä–∞—Å–ª[–∞-—è]*)'
        counter_match = re.match(counter_pattern, text)
        if counter_match:
            cases_num, _, industries_num, _ = counter_match.groups()
            if target_lang == "en":
                return f"{cases_num} cases from {industries_num} industries"
            elif target_lang == "zh":
                return f"Êù•Ëá™{industries_num}‰∏™Ë°å‰∏öÁöÑ{cases_num}‰∏™Ê°à‰æã"
        
        return text
    
    def translate_dict(self, data: dict, target_lang: str) -> dict:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞—Ä—å"""
        translated = {}
        
        for key, value in data.items():
            if isinstance(value, dict):
                translated[key] = self.translate_dict(value, target_lang)
            elif isinstance(value, list):
                translated[key] = [
                    self.translate_text(item, target_lang) if isinstance(item, str) else item
                    for item in value
                ]
            elif isinstance(value, str):
                translated[key] = self.translate_text(value, target_lang)
            else:
                translated[key] = value
        
        return translated
    
    def create_translation(self, source_file: str, target_lang: str, output_file: str):
        """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–∞"""
        with open(source_file, 'r', encoding='utf-8') as f:
            source_data = json.load(f)
        
        translated_data = {}
        
        for key, value in source_data.items():
            if isinstance(value, dict):
                translated_data[key] = self.translate_dict(value, target_lang)
            elif isinstance(value, list):
                # –î–ª—è –º–∞—Å—Å–∏–≤–∞ –∫–µ–π—Å–æ–≤
                translated_data[key] = []
                for item in value:
                    if isinstance(item, dict):
                        translated_data[key].append(self.translate_dict(item, target_lang))
                    else:
                        translated_data[key].append(item)
            elif isinstance(value, str):
                translated_data[key] = self.translate_text(value, target_lang)
            else:
                translated_data[key] = value
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(translated_data, f, ensure_ascii=False, indent=2)
        
        return len(translated_data.get('cases', []))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è GitHub Action"""
    print("ü§ñ GitHub Auto-Translator")
    print("=" * 40)
    
    translator = GitHubTranslator()
    
    # –§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    source_file = "ru.json"
    
    if not os.path.exists(source_file):
        print(f"‚ùå –§–∞–π–ª {source_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
        en_cases = translator.create_translation(source_file, "en", "en.json")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω en.json ({en_cases} –∫–µ–π—Å–æ–≤)")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
        zh_cases = translator.create_translation(source_file, "zh", "zh.json")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω zh.json ({zh_cases} –∫–µ–π—Å–æ–≤)")
        
        print("üéâ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        exit(1)

if __name__ == "__main__":
    main()

